# #if FORMAT == 'ipynb'
========= Dictionaries and Strings =========
# #endif

In this chapter we will mainly focus on two data types: dictionaries and strings.
Dictionaries can be considered a generalization of the list data type, where
the indices are not required to be integers. We have already used strings
multiple times in the previous chapters, but we will revisit them here to
introduce a number of new and useful functions. Both dictionaries and strings
are particularly useful for reading and processing text files, and many of our
examples will be related to such applications.

======= Dictionaries =======
idx{dictionary}idx{mapping}
In mathematics, a mapping is a relation between objects or structures
that often takes the form of a function. A mapping $f$ is a rule that
assigns a unique value $f(x)$ to a given input $x$. Mappings are also
widely used in computer science and can be implemented in many different ways.
For instance, a Python list can be viewed as a mapping between integers
(list indices) and the objects contained in a list. More general mappings can
be implemented using functions and if-tests; for instance, the mapping
!bc
'Norway' --> 'Oslo'
'Sweden' --> 'Stockholm'
'France' --> 'Paris'
!ec
could be implemented in Python as a function:
!bc pycod
def f(x):
    if x == 'Norway':
       return 'Oslo'
    elif x == 'Sweden':
       return 'Stockholm'
    elif x == 'France':
       return 'Paris'
!ec
Such an implementation is obviously not very convenient if we have a
large number of input and output values, however.
An alternative implementation of the mapping would be to use two lists of equal length,
where, for instance, item  $n$ in list
`countries` corresponds to item $n$ in list `capitals`. However, since such general mappings are
useful in many contexts, Python provides a special data structure for them, called a *dictionary*. Data
structures similar to a dictionary are used in many programming languages, but they often have different names.
Common names are associative array, symbol table, hash map, or simply map.

A dictionary can be seen as a generalization of a list, where the indices are not required to be integers,
but can be any immutable Python data type. The "indices" of a dictionary are
called *keys*, and through this course we will mostly use strings as dictionary keys.
The dictionary implementation of the mapping above looks like
!bc pycod
d = {'Norway':'Oslo','Sweden':'Stockholm','France':'Paris'}
!ec
and we can look up values in the dictionary just as we would in a list, using the dictionary *key*
instead of an index:
!bc pycod
print(d['Norway'])
!ec
To extend the dictionary with new values, we can simply write
!bc pycod
d['Germany'] = Berlin
!ec
Notice this important difference between a list and a dictionary. For a list we had to use `append()` to
add new elements. A dictionary has no `append` method, and to extend it we simply introduce a new key
and a corresponding value.

Dictionaries can be initialized in two different ways: one is by using the
curly brackets, as in the example
above. Alternatively, we can use the built-in function `dict`, which takes a
number of key--value pairs as
arguments and returns the corresponding dictionary. The two approaches can look like
!bc pycod-t
mydict = {'key1': value1, 'key2': value2, ...}

temps = {'Oslo': 13, 'London': 15.4, 'Paris': 17.5}

# or
mydict = dict(key1=value1, key2=value2, ...)

temps = dict(Oslo=13, London=15.4, Paris=17.5)
!ec
Notice the differences in syntax, particularly the different use of
quotation marks. When initializing using curly brackets, we
use a colon to separate the key from its corresponding value, and the key can be any immutable Python object
(e.g., strings in the example above). When using the `dict` function, we pass the key-value pairs as *keyword arguments*
to the function,
and the keywords are converted to keys of type string. However, in both cases,
the initialization involves defining
a set of key--value pairs to populate the dictionary. A dictionary is simply an unordered collection of such
key--value pairs.

idx{key}
We are used to looping over lists to access the individual elements. We can do the same with dictionaries, with the
small but important difference that looping over a dictionary means looping over
its keys, and not the values. If we want to access the values we need to look them
up in the dictionary using the keys. For instance, generic code to print all the
values of a dictionary would appear as follows:
!bc pycod-t
for key in dictionary:
    value = dictionary[key]
    print(value)
!ec
A concrete example based on the example above could look like
!bc pycod-t
temps = {'Oslo': 13, 'London': 15.4, 'Paris': 17.5, 'Madrid': 26}
for city in temps:
    print(f'The {city} temperature is temps[city]')
!ec
# #if FORMAT != 'ipynb'
with the following output:
!bc dat
The Paris temperature is 17.5
The Oslo temperature is 13
The London temperature is 15.4
The Madrid temperature is 26
!ec
# #endif
As mentioned above, a dictionary is an *unordered* collection of
key--value pairs, meaning that the
sequence of the keys in the dictionary is arbitrary. If we want to print or otherwise process
the elements in a particular order, the keys first need to be sorted, for instance,
using the built-in function `sorted`:
!bc pycod
for city in sorted(temps):   # alphabetic sort of keys
    value = temps[city]
    print(value)
!ec
There can be applications where sorting the keys in this manner is important,
but usually the order of a dictionary is insignificant.
In most applications where the order of the elements is important, a list or an array is a more
convenient data type than a dictionary.

=== Dictionaries and lists share many similarities. ===
Much of the functionality that we are familiar with for list also exists for dictionaries. We can, for instance,
check if a dictionary has a particular key with
the expression `key in dict`, which returns true or false:
!bc pyshell
>>> if 'Berlin' in temps:
...     print('Berlin:', temps['Berlin'])
... else:
...     print('No temperature data for Berlin')
...
No temperature data for Berlin
>>> 'Oslo' in temps     # standard Boolean expression
True
!ec
Deleting an element of a dictionary is done exactly the same way as with lists,
using the operator `del`,
and we can use `len` to check its length:
!bc pyshell
>>> del temps['Oslo']   # remove Oslo key and value
>>> temps
{'Paris': 17.5, 'London': 15.4, 'Madrid': 26.0}
>>> len(temps)          # no of key-value pairs in dict.
3
!ec
In some cases, it can be useful to access the keys or values of a dictionary
as separate entities, and this can be accomplished with the
methods  `keys` and `values`, for instance
`temps.keys()` and `temps.values()` for the case above. These methods will return *iterators*, which are
list-like objects that can be looped over or converted to a list:
!bc pyshell
>>> for temp in temps.values():
>>>    print(temp)
...
17.5
15.4
26.0
>>> keys_list = list(temps.keys())
!ec
idx{`keys` (dictionary method)}idx{`values` (dictionary method)}

Just as with lists, when we assign an existing dictionary to a new variable,
the dictionary is not copied. Instead,
the new variable name becomes a *reference* to the same dictionary, and changing it will also change the original
variable. The following code illustrates the behavior:
!bc pyshell
>>> t1 = temps
>>> t1['Stockholm'] = 10.0    # change t1
>>> temps                     # temps is also changed!
{'Stockholm': 10.0, 'Paris': 17.5, 'London': 15.4,
  'Madrid': 26.0}
>>> t2 = temps.copy()         # take a copy
>>> t2['Paris'] = 16
>>> t1['Paris']               # t1 was not changed
17.5
!ec
Here, the call to `temps.copy()` ensures that `t2` is a copy of the original dictionary, and not a reference, so changing
it does not alter the original dictionary. Recall that lists behave in the same way:
!bc pyshell
>>> L = [1, 2, 3]
>>> M = L
>>> M[1] = 8
>>> L[1]
8
>>> M = L.copy() #for lists, M = L[:]  also works
>>> M[2] = 0
>>> L[2]
3
!ec

So far we have used texts (string objects) as keys, but the keys of a dictionary can be any *immutable* (constant) object.
For instance, we can use integers, floats, and tuples as keys, but not lists since they are mutable objects:
!bc pyshell
>>> d = {1: 34, 2: 67, 3: 0}   # key is int
>>> d = {13: 'Oslo', 15.4: 'London'} # possible
>>> d = {(0,0): 4, (1,-1): 5}  # key is tuple
>>> d = {[0,0]: 4, [-1,1]: 5}  # list is mutable/changeable
...
TypeError: unhashable type: 'list'
!ec
Of course, the fact that these alternatives work in Python does not mean that
they are recommended or very useful. It is, for instance, hard to imagine a
useful application for a dictionary with a temperature as the key and a
city name as the value. Strings are the most obvious and common data type
for dictionary keys and will also be the most common through this book.
However, there are applications where other types of keys can be useful,
as we see in the following examples.

======= Example: A Dictionary for Polynomials =======
idx{polynomial dictionary}
The information in a polynomial such as
!bt
\[ p(x)=-1 + x^2 + 3x^7 \]
!et
can be represented by a dictionary with the power as the key (`int`) and
the coefficient as the value (`float` or  `int`):
!bc pycod
p = {0: -1, 2: 1, 7: 3}
!ec
More generally, a polynomial written on the form
!bt
\[
p(x) = \sum_{i\in I}^N c_i x^i ,
\]
!et
for some set of integers $I$ can be represented by a dictionary with keys $i$ and values $c_i$.
To evaluate a polynomial represented by such a dictionary, we need to iterate
over the keys of the dictionary, extract the
corresponding values, and sum up the terms. The following function takes two
arguments -- a dictionary `poly` and a number
or array `x` -- and evaluates the polynomial in `x`:
!bc pycod
def eval_poly_dict(poly, x):
    sum = 0.0
    for power in poly:
        sum += poly[power]*x**power
    return sum
!ec
We see that the function follows our standard recipe for evaluating a sum;
set a summation variable to zero and then add in all the terms
using a for loop. We can write an even
shorter version of the function using Python's built-in function `sum`:
!bc pycod
def eval_poly_dict(poly, x):
    # Python's sum can add elements of an iterator
    return sum(poly[power]*x**power for power in poly)
!ec

Since the keys of the polynomial dictionary are integers, we can also replace the dictionary
with a list, where the list index corresponds to the power of the respective term.
The polynomial above, that is, $-1 + x^2 + 3x^7$ can be represented as the list
!bc pycod
p = [-1, 0, 1, 0, 0, 0, 0, 3]
!ec
and the general polynomial $\sum_{i=0}^N c_ix^i$ is stored as
`[c0, c1, c2, ..., cN]`. The function to evaluate a polynomial represented by a list is
nearly identical to the function for the dictionary. The function
!bc pycod
def eval_poly_list(poly, x):
    sum = 0
    for power in range(len(poly)):
        sum += poly[power]*x**power
    return sum
!ec
will evaluate a polynomial $\sum_{i=0}^N c_ix^i$ for a given $x$. An alternative
and arguably more "Pythonic version" uses the convenient `enumerate` function:
!bc pycod
def eval_poly_list_enum(poly, x):
    sum = 0
    for power, coeff in enumerate(poly):
        sum += coeff*x**power
    return sum
!ec
The `enumerate` function essentially turns a list into a list of 2-tuples,
where the first element is the index of a list element and the second is the
element itself. The function is quite convenient for iterating
through a list when we also need access to the indices, and it is very common
in Python programs.

The representations based on dictionaries and lists are very similar,
but the list representation has the obvious disadvantage
that we need to store all the zeros. For "sparse" high-order polynomials, this can be
quite inconvenient, and the dictionary representation is obviously better.
The dictionary representation can also easily handle negative powers,
for instance $\frac{1}{2} x^{-3} + 2x^4$:
!bc pycod
p = {-3: 0.5, 4: 2}
print eval_poly_dict(p, x=4)
!ec
This code will work just fine without any modifications of the `eval_poly_dict`
function. Lists in Python cannot have negative indices (since indexing a list with a negative number
implies counting indices from the end of the list), and extending the list
representation to handle negative powers is not a trivial task.

======= Example: Reading File Data to a Dictionary =======
Say we have a file `deg2.txt`, containing temperature data for a number of cities:
!bc dat
Oslo:          21.8
London:        18.1
Berlin:        19
Paris:         23
Rome:          26
Helsinki:      17.8
!ec
We now want to read this file and store the information in a dictionary,
with the city names as keys and the temperatures as values. The recipe is
nearly identical to the one we previously used to read file data into lists:
first create an empty dictionary and then fill it with values read from the file:
!bc pycod
with open('deg2.txt', 'r') as infile:
    temps = {}                  # start with empty dict
    for line in infile:
        city, temp = line.split()
        city = city[:-1]        # remove last char (:)
        temps[city]  = float(temp)
!ec
The only real difference between this code and previous examples based on lists
is the way new data are added to the dictionary. We used the
`append` method to populate an empty list, but dictionaries have no such method. Instead,
we add a new key--value pair with the line `temps[city] = float(temp)`. Apart from this technical
difference, the recipe for populating a dictionary is exactly the same as for lists.


======= String Manipulation =======
idx{string}
We have already worked with strings (having type `str`)in previous chapters, for instance introducing
the very useful `split`-method:
!bc pyshell
>>> s = 'This is a string'
>>> s.split()
['This', 'is', 'a', 'string']
!ec
String manipulation is essential for reading and interpreting the content of files,
and the way we process files often depends on the file structure. For
instance, we need to know the line on which the relevant information starts, how data items
are separated, and how many data items are on each line. The algorithm for reading and processing
the text often needs to be tailored to the file structure.
Although the `split` function already considered is quite
flexible, and works for most of the examples presented in this book, it might
not always be the best tool. Python has a number of other ways to process strings,
which could, in some cases, make the text processing easier and more efficient.

To introduce some of the basic operations on strings, we can use the following
string variable as an example:
!bc pyshell
>>> s = 'Berlin: 18.4 C at 4 pm'
!ec
Such a string is really just a sequence of characters, and it behaves much like
other sequence data types such as lists and tuples. For instance,
we can index a string to extract individual characters;
!bc pyshell
>>> s[0]
'B'
>>> s[1]
'e'
>>> s[-1]
'm'
!ec
Slices also work in the way we are used to and can be used to extract substrings of a string:
!bc pyshell
>>> s
'Berlin: 18.4 C at 4 pm'
>>> s[8:]     # from index 8 to the end of the string
'18.4 C at 4 pm'
>>> s[8:12]   # index 8, 9, 10, and 11 (not 12!)
'18.4'
>>> s[8:-1]
'18.4 C at 4 p'
>>> s[8:-8]
'18.4 C'
!ec
Iterating over a string also works as we would expect:
!bc pyshell
>>> s = 'Berlin: 18.4 C at 4 pm'
>>> for s_ in s:
    	print(s_, end=' ')
!ec

idx{`find` (string method)}idx{`index` string/list method}
Strings have a method named `find` that searches the string for a given substring, and returns
the index of its location, as follows:
!bc pyshell
>>> s.find('Berlin')  # where does 'Berlin' start?
0                     # at index 0
>>> s.find('pm')
20
>>> s.find('Oslo')    # not found
-1
!ec
Lists do not have a `find`-method, but they have a method named
`index`, which is quite similar in that it searches for a given element
in the list and returns its index. Strings also have a method
named `index` that does almost the same thing as `find`. However, while `find`
will return $-1$ if the substring does not exist in the string, `index`
will end with an error message. If we want to know if a substring is
part of a string and do not really care about its location, we can also use `in`:
!bc pyshell
>>> 'Berlin' in s
True
>>> 'Oslo' in s
False

>>> if 'C' in s:
...     print('C found')
... else:
...     print('no C')
...
C found
!ec
This use of `in` to check for the existence of a single element also works
for lists and tuples. For strings, the method is slightly more flexible,
since we can check for a substring of arbitrary length.

In many cases, we are interested not only in finding a substring, but also
in finding it and replace it with something else. For this task, we have a
string method named `replace`. It takes two strings as arguments, and a call
such as `s.replace(s1, s2)` will replace `s1` by `s2` everywhere in the string `s`.
The following examples illustrate how this method is used:
!bc pyshell
>>> s = 'Berlin: 18.4 C at 4 pm'
>>> s.replace(' ', '__')
'Berlin:__18.4__C__at__4__pm'
>>> s.replace('Berlin', 'Bonn')
'Bonn: 18.4 C at 4 pm'
>>> s.replace(s[:s.find(':')], 'Bonn')
'Bonn: 18.4 C at 4 pm'
!ec
In the final example, we combine `find` and `replace` to replace all the text before the `':'` with `'Bonn'`. First,
`s.find(':')` returns the number six, which is the index where the `':'` is found;
then the slice
`s[:6]` is `'Berlin'`, which is replaced by `'Bonn'`. However, one important
observation in this example is that these repeated calls to `s.replace` do not change `s`,
but, instead, each call returns a new string where the substrings have been replaced as
requested.

idx{`split`}idx{`join`}
=== Splitting and joining strings. ===
We have already introduced the `split` method, which is arguably the most
useful method for reading and processing text files. As we recall from Chapter
ref{ch:input}, the call `s.split(sep)` will split the string `s` into a list of
substrings separated by `sep`. The `sep` argument is optional, and if it is
omitted the string is split with respect to whitespace.
Consider these two simple examples to recall how `split` is used:
!bc pyshell
>>> s = 'Berlin: 18.4 C at 4 pm'
>>> s.split(':')
['Berlin', ' 18.4 C at 4 pm']
>>> s.split()
['Berlin:', '18.4', 'C', 'at', '4', 'pm']
!ec
The `split` method has an inverse, called `join`, which is used to put a list of strings together with a
delimiter in between:
!bc pyshell
>>> strings = ['Newton', 'Secant', 'Bisection']
>>> ', '.join(strings)
'Newton, Secant, Bisection'
!ec
Notice that we call the `join` method belonging to the delimiter `', '`,
which is a string object, and pass the list of
strings as an argument. If we want to put the same list together separated by whitespace, we would simply
replace `', '.join(strings)` in the example above with `' '.join(strings)`.

Since `split` and `join` are inverse operations, using them in sequence will give back the original string,
as in the following example;
!bc pyshell
>>> l1 = 'Oslo: 8.4 C at 5 pm'
>>> words = l1.split()
>>> l2 = ' '.join(words)
>>> l1 == l2
True
!ec
A common use case for the join method is to split off a known number of words on a line.
Say we want to read a file in the following format, and combine the city name and
the country into a single string:
!bc dat
Tromso Norway 69.6351 18.9920 52436
Molde Norway 62.7483 7.1833 18594
Oslo Norway 59.9167 10.7500 835000
Stockholm Sweden 59.3508 18.0973 1264000
Uppsala Sweden 59.8601 17.6400 133117
!ec
The following code will read such a file and create a nested dictionary containing
the data
!bc pycod
cities = {}
with open('cities.txt') as infile:
    for line in infile:
        words = line.split()
        name = ', '.join(words[:2])
        data = {'lat': float(words[2]),  'long':float(words[3])}
        data['pop'] = int(words[4])
        cities[name] = data
!ec
Here the line `name = ', '.join(words[:2])` will create strings such as `'Tromso, Norway'`,
which are then used as dictionary (keys). The value associated with each key is
a dictionary containing the latitude and longitude data.
idx{nested dictionary}

In most of the examples considered so far we have mostly used `split` for processing text
files line by line, but in some cases we have a string with a great deal of text on
multiple lines and we want to split it into single lines. We can do so by using the
`split` method with the appropriate separator. For instance, on Linux and Mac systems,
sthe line separator
is  `\n`;
!bc pyshell
>>> t = '1st line\n2nd line\n3rd line'
>>> print t
1st line
2nd line
3rd line
>>> t.split('\n')
['1st line', '2nd line', '3rd line']
!ec
This example works fine on Mac or Linux, but the line separator on Windows
is not `\n`, but `\r\n`, and, for a platform-independent solution, it is
better to use the method `splitlines()`, which works with
both line separators:
!bc pyshell
>>> t = '1st line\n2nd line\n3rd line'	   #Unix format
>>> t.splitlines()
['1st line', '2nd line', '3rd line']
>>> t = '1st line\r\n2nd line\r\n3rd line' # Windows
>>> t.splitlines()                         # cross platform!
['1st line', '2nd line', '3rd line']
!ec

idx{immutable objects}
=== Strings are constant -- immutable -- objects. ===
In many of the examples above, we highlighted the similarity
between strings and lists, since we are very familiar with lists
from earlier chapters. However, strings are even more similar to tuples, since they are
immutable objects. We could change the elements of a list in place by
indexing into the list, but this does not
work for strings. Trying to assign a new value to a part of a string
will result in an error message:
!bc pyshell
>>> s[18] = 5
...
TypeError: 'str' object does not support item assignment
!ec
Instead, to perform such a replacement, we can build a new string manually
by adding pieces of the original string or use the `replace` method introduced above:
!bc pyshell
>>> # build a new string by adding pieces of s:
>>> s2 = s[:18] + '5' + s[19:]
>>> s2
'Berlin: 18.4 C at 5 pm'
>>> s2 = s.replace(s[18],'5')
>>> s2
'Berlin: 18.4 C at 5 pm'
!ec
The fact that strings are immutable, but still have a method such as `replace`, could
be confusing to some. How can we replace a substring with another if strings are immutable objects?
The answer is that `replace` does not really change the original string, but returns
a new one. This behavior is similar to, for instance, the call `s.split()`,
which will not turn `s` into a list but, instead, will
leave `s` unchanged and *return* a list of the substrings. Similarly, a call
such as `s.replace(4,5)` does
not change `s` but it will return a new string that we can assign to either `s` or some other variable name,
as we did in the example above. The call `s.replace(4,5)` does nothing useful on its own, unless it is combined
into an assignment such as `s2 = s.replace(4,5)` or `s = s.replace(4,5)`.

idx{`strip`}
=== Other convenient string methods in Python. ===
It is often convenient to strip leading or trailing whitespace from a string, and there are methods `strip(), lstrip()` and
`rstrip()` to do just this:
!bc pyshell
>>> s = '   text with leading/trailing space   \n'
>>> s.strip()
'text with leading/trailing space'
>>> s.lstrip()   # left strip
'text with leading/trailing space   \n'
>>> s.rstrip()   # right strip
'   text with leading/trailing space'
!ec
We can also check whether a string contains only numbers (digits),
only space, or if a string starts or ends with a given substring:
!bc pyshell
>>> '214'.isdigit()
True
>>> '  214 '.isdigit()
False
>>> '2.14'.isdigit()
False

>>> '    '.isspace()   # blanks
True
>>> '  \n'.isspace()   # newline
True
>>> '  \t '.isspace()  # TAB
True
>>> ''.isspace()       # empty string
False

>>> s.startswith('Berlin')
True
>>> s.endswith('am')
False
!ec
Finally, we might be interested in converting between lowercase and uppercase characters:
!bc pyshell
>>> s.lower()
'berlin: 18.4 c at 4 pm'
>>> s.upper()
'BERLIN: 18.4 C AT 4 PM'
!ec
The examples shown so far are just a few of the useful string operations
defined in Python. Many more exist, but all the
text processing tasks considered in this book can be accomplished with the
operations listed here. Nearly all the tasks
we encounter in this book can be solved by using a combination of `split` and `join`
in addition to string indexing and slicing.

=== Example: Reading pairs of numbers (x,y) from a file ===
To summarize some string operations using an example, consider the
task of reading files in the following format;
!bc dat
(1.3,0)    (-1,2)    (3,-1.5)
(0,1)      (1,0)     (1,1)
(0,-0.01)  (10.5,-1) (2.5,-2.5)
!ec
We want to read these coordinate pairs, convert the numbers to floats, and store
them as a list of tuples. The algorithm is similar to the way we
processed files earlier:
 o Read the file line by line
 o For each line, split the line into words (each number pair)
 o For each word, strip the parentheses
   and split the rest with respect to comma to extract the numbers

From these operations, we can observe that the `split` function is probably a
good tool, as it usually is when processing text files. To strip the parentheses
from the coordinate pairs, we can, for instance, use slicing.
Translated into code, the example can look as follows:
!bc pycod
pairs = []   # list of (n1, n2) pairs of numbers
with open('pairs.txt', 'r') as lines:
    for line in lines:
        words = line.split()
        for word in words:
            word = word[1:-1]  # strip off parentheses
            n1, n2 = word.split(',')
            n1 = float(n1);  n2 = float(n2)
            pair = (n1, n2)
            pairs.append(pair)
!ec
There are multiple alternative solutions for reading a file in the given format, but
this one is quite simple and also relatively robust with respect to handling
different numbers of pairs on each line and variable use of whitespace.
